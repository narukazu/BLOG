// Generated by CoffeeScript 1.7.1
(function() {
  var Resource, request, _;

  request = require("request");

  _ = require("underscore");

  Resource = (function() {
    function Resource(_arg) {
      var methods, resources;
      this.path = _arg.path, this.token = _arg.token, methods = _arg.methods, resources = _arg.resources;
      resources || (resources = []);
      _.each(resources, (function(_this) {
        return function(opts, name) {
          var path, token;
          if (_.isString(opts)) {
            opts = {
              path: opts
            };
          }
          path = _this.path + opts.path;
          token = _this.token;
          return _this[name] = new Resource({
            path: path,
            token: token,
            methods: opts.methods,
            resources: opts.resources
          });
        };
      })(this));
      methods || (methods = ["get"]);
      _.each(methods, (function(_this) {
        return function(method) {
          return _this[method] = _this.buildMethod(method);
        };
      })(this));
    }

    Resource.prototype.buildMethod = function(method) {
      return (function(_this) {
        return function(params, cb) {
          var options, path;
          if (_.isFunction(params)) {
            cb = params;
            params = {};
          }
          path = _this.path;
          _.each(params, function(val, key) {
            if (path.match(RegExp(":" + key))) {
              path = path.replace(RegExp(":" + key), val);
              return delete params[key];
            }
          });
          path = path.replace(/\/:\w+/, "");
          options = {
            method: method,
            url: path
          };
          if (method === "get") {
            options.qs = params;
          } else {
            options.json = params;
          }
          if (_this.token != null) {
            options.auth = {
              bearer: _this.token
            };
          }
          request(options, cb);
          return null;
        };
      })(this);
    };

    return Resource;

  })();

  module.exports = Resource;

}).call(this);
